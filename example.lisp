(in-package :cl-spread-example)
(defvar out *standard-output*)

(defun find-words (str)
	   (do ((counter 0 (1+ counter))
		(res "")
		(lst '()))
	       ((= counter (length str)) (nreverse (push res lst)))
	     (let ((obj (elt str counter)))
	       (if (or (char= obj #\ )
		       (char= obj #\Space)
		       (char= obj #\Tab))
		   (if (string/= "" res) (prog1 (push res lst) (setf res "")))
		   (setf res (concatenate 'string res (string obj)))))))



(defun mkstr (&rest args)
  (let ((text (with-output-to-string (ss)
		(dolist (item args)
		  (cond ((stringp item)
			 (write-string item ss))
			((characterp item)
			 (write-char item ss))
			((atom item)
			 (write item :stream ss))
			((consp item)
			 (dolist (x item)
			   (write-string (mkstr x " ") ss))))))))
	text))

(defun read-all (con)
  (when (poll con)
    (receive-formatted-mess con)
    (read-all con)))
(defun main (&optional (user "test-user") (host "4803@localhost"))
  (let ((con (connect host user))
	(end))
    (when con
      (bt:make-thread (lambda ()
			(do ()
			    (end)
			  (sleep 1)
			  (when (poll con)
			    (receive-formatted-mess con)))))
      (format out "Usage~%q - quit~%j <group> - join group~%s <group> <message> - sends message to group~%")
      
    (do ((end nil)
	 (line))
	(end)
      (setf line (read-line))
      (cond ((zerop (length line))
	     (format out "error~%"))
	    (t 
	     (let ((words (cdr (find-words line))))
	       (case (aref line 0)
		 (#\q (quit-con con)
		      (setf end t))
		 (#\j (join con (car words)))
		 (#\s (send con (mkstr (cdr words)) (car words)))
		 (otherwise (format out "malformed command~%"))))))))))
